> npm install redux react-redux


Prop drilling: it occurs when a parent component passes data down to its children and then those children pass the same data down to their own children. At the end, it's a long chain of component dependencies that can be difficult to manage and maintain.

Redux is a JS library for statem management. Its also called flux like state propagation library

There are three type of states
1. local state (State that belongs to a single component which usually managed by useState() and useReducer() )
2. cross-component state (State that affect multiple component which require props chain and prop drilling)
3. app-wide state (State that affects the entire app)

Here useContext really solve the problem of passing data across the cross-component and app-wide component


--------------------- Redux vs. React Context
Why redux despite we have React context hook which also avoids the props drilling/props chaining?

Important point to note that we can use both redux and react context in same application.

If there is a situation is which a single component is taking multiple states from the other component then by using the react Context you will end with deeep context provider and context
consumer components which is not goood.

For such cases React Context will give you a complex setup to manage such states.
So inshort react context use is good for low frequency updates which are not suddenly updating, cause React context is not made for high performance.

Redux do not come up with such low frequency and complex setup with deep nested component problems


----------------------How Redux works?

You will always have one store (Central Data/State Store)
Your all states would be in this single store. 
We can use this data inside our component. 
To change data in the store we will use Reducer Function (Its general concept in which perfrom some action on a set of data and generate a new output it is NOT that reducer funciton in the useReducer hook)
But who will trigger this reducer function?
The answer is actions.....as we know components run dispatch functions which are actions/or describe what should be done which will trigger the reducer function and then that reducer function will mutate the central data store and then it will send the updated value to components and so on.

Centeral store--->components---->Dipatch function--->action--->reducer function  (repeat)


----------Reducer Function

This function takes two parameters 
old state
dispatched action 


Output: This reducer fucntion can return any thing but in most of the cases it will return new state object.

-------------This is how a basic redux look like in node js

const redux = require('redux');

const counterReducer = (state, action) =>{
    return  {
        counter: state.counter + 1
    }

}

const store = redux.createStore(counterReducer);



----------------This is how basic redux looks like in react

import { createStore } from "redux";
const initialState = {counter: 0,  showCounter: true}
const counterReducer = (state = initialState, action) => {
  if (action.type === "increment") {
    return {
      counter: state.counter + 1,
      showCounter:state.showCounter
    };
  }
  if (action.type === "decrement") {
    return {
      counter: state.counter - 1,
      showCounter:state.showCounter
    };
  }
  if (action.type === "increaseBy5") {
    return {
      counter: state.counter + action.amount,
      showCounter:state.showCounter
    };
  }
  if (action.type === "decreaseBy5") {
    return {
      counter: state.counter - action.amount,
      showCounter:state.showCounter
    };
  }
  if (action.type === "toggle") {
    return {
      showCounter:!state.showCounter,
      counter:state.counter
    };
  }
  return state;
};
const store = createStore(counterReducer);

export default store;

// In this code simply a store is taking a reducer function namely counterReducer
// and our counterReducer function contains actions and dispatch i.e increment and decrement

now to use it go to the major index.js and in root component import provider and your store and wrap the app component inside the provider. This will make the child component of the app component to use the redux or you can say access the data in store :


// In index.js file:

import React from 'react';
import ReactDOM from 'react-dom/client';

import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import store from './store/index';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Provider store={store}><App /></Provider>);

//Now every child element of app have access to the redux store.

//---------File where are using redux

import { useSelector, useDispatch } from "react-redux";
import classes from "./Counter.module.css";

const Counter = () => {
  const toggleCounterHandler = () => {
    dispatch({ type: "toggle" });
  };
  const dispatch = useDispatch();

  const counter = useSelector((state) => state.counter); //useSelector is getting data from state obj which is in store
  const show = useSelector((state) => state.showCounter); //useSelector is getting data from state obj which is in store

  const incrementHandler = () => {
    dispatch({ type: "increment" });
  };
  const decreaseHandler = () => {
    dispatch({ type: "decreaseBy5", amount:5 });
  };
  const increaseHandler = () => {
    dispatch({ type: "increaseBy5", amount: 5 });
  };
  const decrementHandler = () => {
    dispatch({ type: "decrement" });
  };
  

  return (
    <main className={classes.counter}>
      <h1>Redux Counter</h1>
      {show && <div className={classes.value}>{counter}</div>}
      <div>
        <button onClick={incrementHandler}>Increment</button>
        <button onClick={increaseHandler}>Increase by 5</button>
        <button onClick={decreaseHandler}>Decrease by 5</button>
        <button onClick={decrementHandler}>Decrement</button>
      </div>
      <button onClick={toggleCounterHandler}>Toggle Counter</button>
    </main>
  );
};

export default Counter;



--------------------------------useSelector() Hook
This is a custom hook made by redux team. This hook allows us to get some part of data from redux store and will executed automatically by redux.

Now to dispatch actions we will use useDispatch() hook its also a redux hook 

---------------------------------------Pay load
const decrementHandler = () => {
    dispatch({ type: "decrement" , amount:5 });
  };

//from dispatch function we are passing data to action object where amount is a payload. Payload is nothing just another key value pair sending to action


-------------------Correct usage of state

you should NEVR EVER mutate the state.
for exp: state.counter++ this will mutate the state

Actually redux itself do not mutate the state it over write the current existing state.
So instead of mutating the state always return a brand new over writing state.






