To create React routers you only have to focus on three main files
App.js
Root.js
MainNavigation.js


all three sample file code is given below:

We must have anm idea what routing is. 
Here the path you enter in the web brower after the slash is basically a route or simply an address which you make an http request and server serves you with the respective files. 
You change the address and server send you files of different pages which should display to the user. This make the whole routing procedure slow and bad user experience as different HTML files are loading. 

Here comes the single page application where you only load the html files once and then JS takes the responsibility of should be shown to the client.


----------------Package
npm install react-router-dom

routes are nothing just mapping components 

---------------------Defining Routes

This is how you define routes in React using createBrowserRouter for creating the route and RouterProvider to connect the route with the component

import { createBrowserRouter, RouterProvider } from "react-router-dom";
import HomePage from "./pages/Home";
import ProductsPage from "./pages/Products";

const router = createBrowserRouter([
  { path: "/", element: <HomePage /> },
  { path: "/products", element: <ProductsPage /> },
]);
function App() {
  return (
    <>
      <RouterProvider router={router} />;
    </>
  );
}

export default App;

---------------------------Navigating between pages with links

There are two ways of doing this one is using simply a href in <a></a> tag this will do your work but the problem is by it this way will always send a new http req to the server and then the server will serve the respective page but in this way we are loading a whole JS and html page again. This is a lot of unnecessary work which will affect our performance.

To do this in right way we are now gonna use a module called link from react-router-dom

now instead of using <a></a> tag and href attribute we are gonna use <link> tag and "to" attribute instead of href

import {Link} from 'react-router-dom';
<Link to="/about">This is my About Page</Link>

by this is such way will prevent the brower to reload and will just render the desired component instead of loading the whole html and JS file again.


But what if when you will have several pages as we know nav bar will remain same in all pages so instead of adding nav bar component in all pages make a wraper root layout which will contain your nav bar you can do it by using Outlet module from react-router-dom

make a Root.js component file:

import React from "react";
import MainNavigation from '../components/MainNavigation'
import { Outlet } from "react-router-dom";

function RootLayout() {
  return (
    <>
      <MainNavigation/>
      <Outlet/>
    </>
  );
}
export default RootLayout;


//MainNavigation component file:


import React from 'react'
import { Link } from 'react-router-dom';

function MainNavigation() {
  return (
    <nav>
        <ul>
            <li><Link to="/">Home</Link></li>
            <li><Link to="/products">Products</Link></li>
        </ul>
    </nav>
  )
}


export default MainNavigation;
    

//In App.js you have make parent and children relation as below:

import { createBrowserRouter, RouterProvider } from "react-router-dom";
import HomePage from "./pages/Home";
import ProductsPage from "./pages/Products";
import RootLayout from "./pages/Root";

const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    children: [
      { path: "/", element: <HomePage /> },
      { path: "/products", element: <ProductsPage /> },
    ],
  },
]);
function App() {
  return (
    <>
      <RouterProvider router={router} />
    </>
  );
}

export default App;


----------------------Showing Error page on wrong URL
all thing will remain same. ofcourse you have to make an error component.
simply you just have to make some changes in app.js file as below:

import { createBrowserRouter, RouterProvider } from "react-router-dom";
import HomePage from "./pages/Home";
import ProductsPage from "./pages/Products";
import RootLayout from "./pages/Root";
import ErrorPage from "./pages/Error";

//defining the routes
const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      { path: "/", element: <HomePage /> },
      { path: "/products", element: <ProductsPage /> },
    ],
  },
]);
function App() {
  return (
    <>
      <RouterProvider router={router} />
    </>
  );
}

export default App;

// here we simply used a builtin feature of react-router-dom that is errorElement and simply we have pointed toward our errorPage component which we want to show on occuring an error.

---------------------Highlighting the active page on nav bar
In order to highlight the page which is currently showing you can use tag called NavLink you have to import it from react-router-dom
This link uses functions in className attribute and returns the name of class which we want to apply:

// In Main Navigation File:
import React from 'react'
import { NavLink } from 'react-router-dom';
import classes from './MainNavigation.module.css'

function MainNavigation() {
  return (
    <header className={classes.header}>
    <nav>
        <ul className={classes.list}>
            <li><NavLink to="/" className={({isActive})=> isActive ? classes.active : undefined }>Home</NavLink></li>
            <li><NavLink to="/products"className={({isActive})=> isActive ? classes.active : undefined }>Products</NavLink></li>
        </ul>
    </nav>
    </header>
  )
}


export default MainNavigation;

// In MainNavigation.module.css file

.list a:hover,
.list a.active {
    color: var(--color-primary-800);
    text-decoration: underline;
  }

--------------------useNavigate() hook
This hook is used to programmatically hit the url

import {useNaviagte} from 'react-router-dom';

const navigate = useNavigate();

const function navigateButtonHandler() {
	naviate('/product')
}


export default function app() {
	return (
<button onClick="navigateButtonHandler">Navigator</Button>
	)
}


//on click this button you will go to the product page




------------------Defining and using Dynamic Routes

For defining routes dynamically you can use another hook called useParams

you can use this by importing it

agian you have to make some changes in app file:
{ path: "/products/:productId", element: <ProductDetails /> }

you have to give path in this syntax in chldren array.
here :productId this identifier is same as a variable. 

//Now in ProductDetails.js file
import React from "react";
import { useParams } from "react-router-dom";

function ProductDetails() {
  const params = useParams();

  return (
    <>
      <h1>Product Details</h1>
      <p>{params.productId}</p>
    </>
  );
}

export default ProductDetails;


//here params.productId will return the path which we will enter in the url after /products/




------------------------------Using Map function to display the list of products

If there are several products instead of writing them line by line and adding Link tag to it you can use map function to map over an array which contains all you info about your page and then iterate over it.
	<ul>
        {PRODUCTS.map((prod) => {
          return (
            <li key={prod.id}>
              <Link to={`/products/${prod.id}`}>{prod.title}</Link>
            </li>
          );
        })}
      </ul>


-----------------Absoute vs Relative path

**The below is absolute path:
const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      { path: "/", element: <HomePage /> },
      { path: "/products", element: <ProductsPage /> },
      { path: "/products/:productId", element: <ProductDetails /> }
    ],
  },
]);


**The below is relative path:
const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      { path: "", element: <HomePage /> },
      { path: "products", element: <ProductsPage /> },
      { path: "products/:productId", element: <ProductDetails /> }
    ],
  },
]);


------------------Going to the previous page

If your relative attribute is set to route then your path would be relative to route In this way on cliking back you will go back to your parent route instead of one step back to the page from where you came here.

To deal this you have to set your relative to 'path' by doing this you will come back to where you are supposed to go

<p><Link to=".." relative="path">Back</Link></p>



-----------------------If you face error of unique key and get help from this below code:
import React from "react";
import { Link } from "react-router-dom";

const DUMMY_EVENTS = [
  { id: "e1", title: "Some Event"},
  { id: "e2", title: "Another Event"},
  { id: "e3", title: "An Another event"},
];
function EventsPage() {
  return (
    <ul>
      {DUMMY_EVENTS.map((event) => {
        return (
          <li key={event.id}>
            <Link to={event.id}>{event.title}</Link>
          </li>
        );
      })}
    </ul>
  );
}
export default EventsPage;


-----------------Another example of app.js file //here we are nesting the components you have same path within a path like all elements must have / and then must have /event
so why we write all these starting path address which is same. Here Rootlayout is parent of EventRootlayout and all inside them are their children

// Challenge / Exercise

import { createBrowserRouter, RouterProvider } from "react-router-dom";
import HomePage from "./Pages/HomePage";
import RootLayout from "./Root";
import EventsPage from "./Pages/Events";
import EventDetailPage from "./Pages/EventDetailPage";
import NewEventPage from "./Pages/NewEventPage";
import EditEventPage from "./Pages/EditEventPage";
import ErrorPage from "./Pages/Error";
import EventsRootLayout from "./Pages/EventsRoot";

const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <ErrorPage/>,
    children: [
      { index: true, element: <HomePage /> },
      {
        path: "events",
        element: <EventsRootLayout />,
        children: [
          { path: "", element: <EventsPage /> },
          { path: ":eventId", element: <EventDetailPage /> },
          { path: "new", element: <NewEventPage /> },
          { path: ":eventId/edit", element: <EditEventPage /> },
        ],
      },
    ],
  },
]);
function App() {
  return (
    <>
      <RouterProvider router={router} />
    </>
  );
}

export default App;


-------------index attribute

This attribute is used to use to make your desired route a default route
to make you path default you to set index:true as:
const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      { index:true, element: <HomePage /> },
      { path: "products", element: <ProductsPage /> },
      { path: "products/:productId", element: <ProductDetails /> }
    ],
  },
]);


you can done the same by replacing index:true with path:''



--------------------------Outlet in react-router-dom

This <Outlet> is used to render the components which is nested inside the components defined above it


--------------------Template of fetching data form backend

useEffect(() => {
    async function fetchEvents() {
      setIsLoading(true);
      const response = await fetch('http://localhost:8080/events');

      if (!response.ok) {
        setError('Fetching events failed.');
      } else {
        const resData = await response.json();
        setFetchedEvents(resData.events);
      }
      setIsLoading(false);
    }

    fetchEvents();
  }, []);


NOTE: its NOT a general template you always have to do some modifications while using it.

---------------------useLoaderData Hook

This is a special hook which you execute to access the closest loader data

This hook will actually return the value of a loader function which we defined in our app.js inside the router function:

children: [
          {
            index: true,
            element: <EventsPage />,
            loader: loader
          },
          { path: ":eventId", element: <EventDetailPage /> },
          { path: "new", element: <NewEventPage /> },
          { path: ":eventId/edit", element: <EditEventPage /> },
        ]

//here loader function is in the event.js and we import it in app.js

export function loader() {
  return (
    async () => {
      const response = await fetch("http://localhost:8080/events");

      if (!response.ok) {
      } else {
        const resData = await response.json();
        const res = new Response('any data', {status: 201});
        return res;

      }
    }
  )
}


Note here the loader function in order get access to its data we use useloader hook. In <EventPage/> component.
NOTE we can only use our useLoader hook only on those component which are on the same level or on lower level. Always remember loader function is not a component its just a component. 

----------------------useNavigation
This hook is used to get the current state of the event This hook is every useful for showing some loading... indicator
writ
import React from "react";
import MainNavigation from "./components/MainNavigation";
import { Outlet, useNavigation } from "react-router-dom";

function EventsRootLayout() {
  const navigation = useNavigation();
  return (
    <nav>
      <MainNavigation />
      <main>
        {navigation.state === "loading" && <p>Loading...</p>}
        <Outlet />
      </main>
    </nav>
  );
}

export default EventsRootLayout;

---------------------------useRouteLoaderData

This hook is same as loader data but the difference is that this is used for using a loader function for a specific route in case there are more than loader functions. This can be done by this hook but to do so this hook requires an id as an argument.

------------------There is another hook called action function

as there is a loader to load data....There is alos a an action which is used to write as we know loader is used to read. Action function uses two arguments one is request and one is params.

If you want to trigger the action of other component in your current component you can do it by the below syntax:
<Form method="post" action="/songs" />;

here "/songs" is the path of other file

------------------redirect function
This special function is used to redirect the user to a specific page.

import {redirect } from 'react-router-dom'
const function(){
//you logic

return redirect('/your_Path_URL')
}
---------------useLoader() function
This function is to used load data before rendering the component
And remember this loader function will be created by us and it will an async function. This function fetch the data from the backend API usually in the form of JSON.

So simply create this function anywhere and then import it into App.js file

export const async myLoaderFunction = ()=> {	
	
	const res = await fetch('https://example.com/api/data')

 return res.json();

}
// here note that .json() also returns a promise but dont need to worry about that as it will automatically handle by loader function

now you have to assosiate this loaderfunction to a route path. You can you do it by using loader property and by doing it so when ever you will visit that link this loader function is gonna execute and it will load the data before rendering the component. so during that time you have to show loading indicator

{ path="/products", element=<Product/>, loader: myLoaderFunction
}


once this path will be visited this myloaderFunction is gonna execute and on its execution it will do something which we have specified as in this case I have specified a fetch fuction which will fetch the data. So now we can use that returning data anywhere with the help of useLoader() hook.

simple import it 

import {useLoader} from 'react-router-dom';

function myComponent() {

	const data = useLoader();
}




//IMPORTANT in which files this returning data will be avaiable?
SO that answer is that only in the file where you associate it with the path and its children components

NOTE: if there are several RouteloaderData hook and you want to call a specific loader function then you can use id: 'myID'
const data = useRouteLoaderData('myID)




----------------------From and form actions

These both useLoader and actions work with createBrowserRouter only.

These <Form></Form> component in router 6.4 is extremely helpful once we submit the form it carries all the values into a bundle of JS objects and send it to the action function.
And again Action function is a function which we create ourselves it is bit like a loader function which was also created by us and fetch all the data and returns it. But this time we will get access to all the form data so we can do what we want with it. Like loader function action function will be called when the form will be submitted. This make working with from little bit easier


import {Form} from 'react-router-dom'
function myComponent() {
return (
	<Form method="Post" action="/path">
		<input type="email" name="email">Enter you Email</input> //dont forget to give name attributes to the input tag as they will be used to get values in obj.
	</Form>
)
}


when the form will be submitted the react will look for the action function React will go to the path defined in the action props and then there the action function associated with the specific route will be triggered. (created that action function anywhere and import it into app.js file and add it to the route


{ path="/products", element=<Product/>, action: myActionFunction
}

//-----
const export myActionFunction = async ({request}) => {
	console.log(request) //its a request object

	const data = request.formData()
	const submission = {
	email: data.get('email')
		}
	console.log(submission)
   if(submission.message.length > 250) {
	return {error: "Message must be less than 250 characters } // we can access this error object using useAction hook as this function is returning this error object
	}
   return redirect('/somePath')

}
// you always have to return something to action function
// here request property will contain all the data entered by the user 
// here formData is a built in method which is used to access the data
// get method requires the name of the input field


// to get the data which this myActionFunction is returning can be get by using useAction hook



import {Form, useAction} from 'react-router-dom'
function myComponent() {
return (
const data = useAction();
	<Form method="Post" action="/path">
		<input type="email" name="email">Enter you Email</input> //dont forget to give name attributes to the input tag as they will be used to get values in obj.
	</Form>
)
}



-----------------Navigate

This Component is simply used to redirect the user to the navigate page....its very important in case of you want to secure your data from the unauthenticated person

for example 

import {Navigate} from 'react-router-dom'
if (!userloggedIn) {
	return <Navigate to="/path" replace={true} />

}


//here replace attribute is very important cause once a user logged out and if he clicked on the go back button on browser it will again be logged in to the account as the account preserve the histroy so to prevent this behaviour we use replace={true	}